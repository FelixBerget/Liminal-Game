#version 330

in vec2 fragTexCoord;
in vec4 fragColor;
in vec3 fragPosition;
in vec3 fragNormal;

uniform vec3 lightPos; 
uniform vec3 lightColor;
uniform float ambient;
uniform sampler2D texture0;  // Add texture sampler

out vec4 finalColor;

void main()
{
    // Get texture color
    vec4 texelColor = texture(texture0, fragTexCoord);
    
    vec3 normal = normalize(fragNormal);
    vec3 lightDir = normalize(lightPos - fragPosition);
    
    // Calculate distance to light
    float distance = length(lightPos - fragPosition);
    
    // Calculate attenuation
    float constant = 1.0;
    float linear = 0.09;
    float quadratic = 0.032;
    float attenuation = 1.0 / (constant + linear * distance + quadratic * (distance * distance));
    
    // Calculate diffuse lighting
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // Apply lighting to texture color instead of fragColor
    vec3 result = (ambient + diffuse * attenuation) * texelColor.rgb;
    
    finalColor = vec4(result, texelColor.a);
}